{"version":3,"file":"static/js/734.0148a345.chunk.js","mappings":"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","sources":["shared/navbar/logo-type/LogoType.tsx","shared/color-mode-button/ColorModeButton.tsx","shared/navbar/drawer/Drawer.tsx","shared/navbar/Navbar.tsx","shared/socials/Socials.tsx","utils/Functions.ts"],"sourcesContent":["import { FC } from \"react\";\n\nimport { Box, Text, useBreakpointValue } from \"@chakra-ui/react\";\n\ninterface Props {\n    text: {\n        mobile: string;\n        desktop: string;\n    };\n}\n\nexport const LogoType: FC<Props> = ({ text }) => {\n    const variant = useBreakpointValue({ base: text.mobile, md: text.desktop });\n\n    return (\n        <Box transition=\"all 0.2s ease-in-out\" _hover={{ cursor: \"pointer\", color: \"primary.600\" }}>\n            <Text fontSize={{ base: \"3xl\", md: \"4xl\" }} lineHeight=\"1\" fontFamily=\"Signature\" mb={{ base: 0, md: -2 }}>\n                {variant}\n            </Text>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { HStack, IconButton, StyleProps, useColorMode, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { MoonIcon, SunIcon } from \"utils/Icons\";\n\nexport const ColorModeButton: FC<StyleProps> = (props) => {\n    const color = useColorModeValue(\"gray.800\", \"white\");\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    return (\n        <HStack {...props}>\n            <IconButton\n                aria-label=\"appearance\"\n                bg=\"transparent\"\n                color={color}\n                fontSize=\"lg\"\n                _hover={{ color: \"primary.500\" }}\n                _active={{ bg: \"transparent\" }}\n                icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n                variant=\"ghost\"\n                size=\"xs\"\n                onClick={() => {\n                    toggleColorMode();\n                    window.scrollBy(0, 1);\n                    window.scrollBy(0, -1);\n                }}\n                w=\"32px\"\n                h=\"32px\"\n            />\n        </HStack>\n    );\n};\n","import { FC, useRef } from \"react\";\n\nimport {\n    Box,\n    Button,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    useDisclosure,\n    IconButton,\n    StyleProps,\n    Flex,\n    VStack,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\nimport { AboutPageId } from \"utils/useScroll\";\nimport { MenuIcon } from \"utils/Icons\";\nimport { Socials } from \"shared/socials/Socials\";\nimport { onResumeOpen } from \"utils/Functions\";\n\ninterface Props extends StyleProps {\n    onSectionClick: (section: string) => void;\n    currentPage: string;\n}\n\nexport const MenuDrawer: FC<Props> = ({ onSectionClick, currentPage, ...props }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const btnRef = useRef<any>(null);\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n\n    return (\n        <Box {...props}>\n            <Button\n                as={IconButton}\n                variant=\"icon\"\n                ref={btnRef}\n                onClick={onOpen}\n                aria-label=\"open drawer\"\n                fontSize=\"lg\"\n                color=\"primary.500\"\n                icon={<MenuIcon />}\n                px=\"0\"\n            />\n            <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose} autoFocus={false}>\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerHeader px=\"4\">\n                        <Flex justifyContent=\"space-between\">\n                            <ColorModeButton />\n                            <DrawerCloseButton position=\"relative\" top=\"0\" right=\"0\" />\n                        </Flex>\n                    </DrawerHeader>\n\n                    <DrawerBody>\n                        <VStack spacing=\"6\" my=\"16\">\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(AboutPageId);\n                                    }, 250);\n                                }}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"300\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                About\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color=\"primary.500\"\n                                onClick={onResumeOpen}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"400\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Resume\n                            </Button>\n                        </VStack>\n                        <Flex justifyContent=\"center\" mt=\"16\">\n                            <Socials delay={100} resume={false} />\n                        </Flex>\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Box, Button, Container, Flex, HStack, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { LogoType } from \"shared/navbar/logo-type/LogoType\";\nimport { bgDark, bgLight } from \"theme\";\nimport { onResumeOpen } from \"utils/Functions\";\nimport { AboutPageId, useScroll } from \"utils/useScroll\";\nimport { MenuDrawer } from \"./drawer/Drawer\";\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\n\nexport const Navbar: FC = () => {\n    const bg = useColorModeValue(bgLight, bgDark);\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n    const currentPage = useScroll();\n\n    const toSection = (section: string) => {\n        document.getElementById(section)?.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    return (\n        <Box bg={bg} position=\"fixed\" top=\"0\" w=\"100%\" left=\"50%\" transform=\"translate(-50%)\" zIndex=\"10\">\n            <Container py=\"4\" px=\"4\" data-aos=\"fade-down\" data-aos-duration=\"500\" data-aos-delay=\"100\">\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <LogoType text={configs.common.logoType} />\n                    <Flex alignItems=\"center\" display={{ base: \"none\", md: \"flex\" }}>\n                        <HStack spacing=\"8\" mr=\"6\">\n\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                onClick={() => toSection(AboutPageId)}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"300\"\n                            >\n                                About\n                            </Button>\n                            <Button variant=\"link\" onClick={onResumeOpen} data-aos=\"fade\" data-aos-delay=\"400\">\n                                Resume\n                            </Button>\n                        </HStack>\n                        <ColorModeButton />\n                    </Flex>\n\n                    <MenuDrawer\n                        currentPage={currentPage}\n                        onSectionClick={toSection}\n                        display={{ base: \"block\", md: \"none\" }}\n                    />\n                </Flex>\n            </Container>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Button, HStack, IconButton, Tooltip } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { onResumeOpen, open } from \"utils/Functions\";\nimport { FacebookIcon, GitHubIcon, InstagramIcon, LinkedInIcon, MailIcon, YoutubeIcon } from \"utils/Icons\";\n\nconst LinksToIconMapper: Record<string, JSX.Element> = {\n    linkedin: <LinkedInIcon />,\n    github: <GitHubIcon />,\n    facebook: <FacebookIcon />,\n    instagram: <InstagramIcon />,\n    youtube: <YoutubeIcon />,\n    mail: <MailIcon />,\n};\n\ninterface Props {\n    resume?: boolean;\n    exclude?: Array<string>;\n    delay?: number;\n}\n\nexport const Socials: FC<Props> = ({ resume = true, exclude, delay = 800 }) => {\n    return (\n        <HStack spacing=\"5\">\n            {resume && (\n                <Button data-aos=\"fade\" data-aos-delay={delay} size=\"lg\" borderRadius=\"xl\" mr=\"2\" onClick={onResumeOpen}>\n                    Resume\n                </Button>\n            )}\n            {configs.common.socials.map(\n                (social, idx) =>\n                    !exclude?.includes(social.type) && (\n                        <Tooltip key={social.type} label={social.type} textTransform=\"capitalize\">\n                            <Button\n                                p=\"0\"\n                                aria-label={`${social.type}-button`}\n                                as={IconButton}\n                                variant=\"icon\"\n                                data-aos=\"fade\"\n                                data-aos-delay={idx * 100 + delay}\n                                fontSize={social.type === \"mail\" ? \"24pt\" : \"20pt\"}\n                                icon={LinksToIconMapper[social.type]}\n                                onClick={() => open(social.link)}\n                            />\n                        </Tooltip>\n                    ),\n            )}\n        </HStack>\n    );\n};\n","import { configs } from \"shared/content/Content\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\n\nexport const onResumeOpen = () => {\n    open(configs.common.resume);\n};\n\nexport const onMailTo = () => {\n    open(\"mailto:\" + configs.common.email);\n};\n"],"names":["LogoType","text","variant","useBreakpointValue","base","mobile","md","desktop","transition","_hover","cursor","color","fontSize","lineHeight","fontFamily","mb","ColorModeButton","props","useColorModeValue","useColorMode","colorMode","toggleColorMode","bg","_active","icon","size","onClick","window","scrollBy","w","h","MenuDrawer","onSectionClick","currentPage","useDisclosure","isOpen","onOpen","onClose","btnRef","useRef","navItemColor","as","IconButton","ref","px","placement","autoFocus","justifyContent","position","top","right","spacing","my","textDecoration","AboutPageId","textDecorationThickness","textDecorationColor","setTimeout","fontWeight","onResumeOpen","mt","Socials","delay","resume","Navbar","bgLight","bgDark","useScroll","toSection","section","document","getElementById","scrollIntoView","behavior","left","transform","zIndex","py","alignItems","configs","display","mr","LinksToIconMapper","linkedin","github","facebook","instagram","youtube","mail","exclude","borderRadius","social","idx","includes","type","label","textTransform","p","open","link","onMailTo"],"sourceRoot":""}